#!/bin/bash

USER="admin"
PASSWORD="bl_uk"
CLAMD_PORT="3310"

CONFIG_ROOT="/heritrix/git/heritrix"
HERITRIX_PROFILES="$CONFIG_ROOT/profiles"
HERITRIX_EXCLUDE="$CONFIG_ROOT/exclude.txt"
HERITRIX_SHORTENERS="$CONFIG_ROOT/url.shorteners.txt"
HERITRIX_SURTS="$CONFIG_ROOT/surts.txt"
HERITRIX_JOBS="/opt/heritrix/jobs"
HERITRIX_HOST="localhost"
HERITRIX_PORT="8443"

usage()
{
		echo -ne "Submit a job to Heritrix. e.g.\n\n\theritrix_job -p profile-daily.cxml -s /tmp/seeds.txt -n daily-1200\n\n"
		echo "OPTIONS:"
		echo "  -h	Show this message."
		echo "  -p	Profile to use."
		echo "  -s	Path to seed list."
		echo "  -n	Job name prefix."
}

heritrix()
{
	curl --silent -d "action=$1" -k -u "$USER:$PASSWORD" --anyauth --location "https://$HERITRIX_HOST:$HERITRIX_PORT/engine/$2" -H "Accept: application/xml"
}

getstatus()
{
	heritrix "none" "job/$1" | sed -rn 's@^\s*<crawlControllerState>([^<]+)</crawlControllerState>.*$@\1@p'
}

waitfor()
{
	while [[ "$(getstatus "$1")" != "$2" ]]
	do
		sleep $3
	done
}

log()
{
	echo "[$(date "+%Y-%m-%d %H:%M:%S")] $1"
}

while getopts "hp:s:n:" OPTION
do
		case $OPTION in
		h)
				usage
				exit 1
				;;
		p)
				PROFILE="$OPTARG"
				;;
		s)
				SEED_PATH="$OPTARG"
				;;
		n)
				JOB_ROOT="$OPTARG"
				;;
		esac
done

if [[ -z $PROFILE ]] || [[ -z $SEED_PATH ]] || [[ -z $JOB_ROOT ]]
then
	usage
	exit 1
fi

#Check we actually have seeds to process.
if [[ $(wc -l < "$SEED_PATH") -eq 0 ]]
then
	log "No seeds found at $SEED_PATH!" >&2
	exit 1
else
	log "Received $(wc -l < "$SEED_PATH") seed(s) from ACT."
fi

#Check we can actually connect to Heritrix
if [[ ! $(heritrix "none") ]]
then
	log "Cannot connect to https://$HERITRIX_HOST:$HERITRIX_PORT/!" >&2
	exit 1
fi

#Kill any current jobs with the same job name.
while read job
do
	if [[ "$job" == "$JOB_ROOT-"* ]] && [[ $(getstatus "$job") != "" ]]
	then
		log "Killing already running job: $job"
		#Pause Job
		heritrix "pause" "job/$job" > /dev/null
		waitfor "$job" "PAUSED" 10 
		#Terminate Job
		heritrix "terminate" "job/$job" > /dev/null
		waitfor "$job" "FINISHED" 10
		#Teardown Job
		heritrix "teardown" "job/$job" > /dev/null
		waitfor "$job" "" 10
	fi
done < <(heritrix "none" | sed -rn 's@^\s*<shortName>([^<]+)</shortName>.*$@\1@p')

#Set up the new job.
NEW_JOB_NAME="$JOB_ROOT-$(date +%Y%m%d%H%M%S)"
NEW_JOB_DIR="$HERITRIX_JOBS/$NEW_JOB_NAME"
#Create the job directory.
log "Setting up $NEW_JOB_NAME"
mkdir "$NEW_JOB_DIR"
if [[ ! -d "$NEW_JOB_DIR" ]]
then
	log "Problem creating $NEW_JOB_DIR!" >&2
	exit 1
fi
#Copy the appropriate profile.
xmllint --xinclude "$HERITRIX_PROFILES/$PROFILE" --output "$NEW_JOB_DIR/crawler-beans.cxml"
if [[ ! -f "$NEW_JOB_DIR/crawler-beans.cxml" ]]
then
	log "Problem copying profile!" >&2
	exit 1
fi
#Replace values in the new profile with the new job name.
sed -ri "s@REPLACE_JOB_NAME@$NEW_JOB_NAME@g" "$NEW_JOB_DIR/crawler-beans.cxml"
sed -ri "s@REPLACE_CLAMD_PORT@$CLAMD_PORT@g" "$NEW_JOB_DIR/crawler-beans.cxml"
sed -ri "s@REPLACE_JOB_ROOT@$JOB_ROOT@g" "$NEW_JOB_DIR/crawler-beans.cxml"
sed -ri "s@REPLACE_HERITRIX_JOBS@$HERITRIX_JOBS@g" "$NEW_JOB_DIR/crawler-beans.cxml"
log "Creating relevant output directories."
while read dir
do
	mkdir "$dir"
done < <(sed -rn 's@^.+(value="|<value>)(/heritrix/.+/)("|</value>).*$@\2@p' "$NEW_JOB_DIR/crawler-beans.cxml")
#Copy remaining configuration files to the new folder.
log "Copying URL shorteners."
cp "$HERITRIX_SHORTENERS" "$NEW_JOB_DIR"
log "Copying exclusion list."
cp "$HERITRIX_EXCLUDE" "$NEW_JOB_DIR"
log "Copying SURTs list."
cp "$HERITRIX_SURTS" "$NEW_JOB_DIR"
log "Moving seeds."
curl --silent "$SEED_PATH" | sed -rn 's@^\s*<urls>([^<]+)</urls>.*$@\1@p' > "$NEW_JOB_DIR/seeds.txt"
mv "$SEED_PATH" "$NEW_JOB_DIR/seeds.txt"

#Add Job Directory
log "Adding $NEW_JOB_NAME to Heritrix."
heritrix "add\&addpath=$NEW_JOB_DIR" > /dev/null
#Build Job Configuration
log "Building $NEW_JOB_NAME"
heritrix "build" "job/$NEW_JOB_NAME" > /dev/null
waitfor "$NEW_JOB_NAME" "NASCENT" 10
#Launch Job
log "Launching $NEW_JOB_NAME"
heritrix "launch" "job/$NEW_JOB_NAME" > /dev/null
waitfor "$NEW_JOB_NAME" "PAUSED" 10
#Pause Job
#heritrix "pause" "job/$NEW_JOB_NAME"
#Unpause Job
heritrix "unpause" "job/$NEW_JOB_NAME" > /dev/null
log "Unpausing $NEW_JOB_NAME"
waitfor "$NEW_JOB_NAME" "RUNNING" 10
waitfor "$NEW_JOB_NAME" "EMPTY" 10
#Terminate Job
heritrix "terminate" "job/$NEW_JOB_NAME" > /dev/null
log "$NEW_JOB_NAME empty; terminating."
waitfor "$NEW_JOB_NAME" "ABORTED" 10
#Teardown Job
heritrix "teardown" "job/$NEW_JOB_NAME" > /dev/null
waitfor "$NEW_JOB_NAME" "" 10
